<launch>
    <!-- Launch Gazebo Simulation -->
    <arg name="x" default="-10.0"/>
    <arg name="y" default="0.0"/>
	<!-- for obstacle_with_landingPad.world -->
	<!--arg name="x" default="-3.0"/>
    <arg name="y" default="0.0"/-->
    <arg name="z" default="0"/>
	<!--arg name="x" default="0.0"/>
    <arg name="y" default="0.0"/>
    <arg name="z" default="0"/-->
	<arg name="world" default="$(find prometheus_gazebo)/worlds/obstacle_with_landingPad.world"/>
	<!--arg name="world" default="$(find prometheus_gazebo)/worlds/indoor_competition.world"/-->
	<!--arg name="world" default="$(find prometheus_gazebo)/worlds/obstacles_with_narrowCorridors.world"/-->
	<arg name="sdf" default="$(find prometheus_gazebo)/amov_models/p450_hokuyo_2Dlidar/p450_hokuyo_2Dlidar.sdf"/>
	<arg name="model" default="p450_hokuyo_2Dlidar"/>
    <include file="$(find prometheus_gazebo)/launch_basic/sitl.launch">
	  <arg name="world" value="$(arg world)"/>
	  <arg name="sdf" value="$(arg sdf)"/>
	  <arg name="model" value="$(arg model)"/>
      <arg name="x" value="$(arg x)"/>
      <arg name="y" value="$(arg y)"/>
      <arg name="z" value="$(arg z)"/>
    </include>

	<!-- run the velocity_mux.cpp -->
	<!-- root1 tests on 231223 no velocity mux -->
    <node pkg="prometheus_mission" type="velocity_mux" name="velocity_mux" output="screen">
    </node>

	<!-- run the local planner -->
	<!--arg name="topic_of_local_pcl" default="/prometheus/sensors/2Dlidar_scan"/>
	<node pkg="prometheus_local_planning" name="local_planner_main" type="local_planner_main" output="screen" launch-prefix="gnome-terminal ">	
		<remap from="/prometheus/planning/local_pcl" to="$(arg topic_of_local_pcl)" />
		<param name="local_planner/algorithm_mode" value="0" type="int"/>
		<param name="local_planner/lidar_model" value="1" type="int"/>
	   <param name="local_planner/fly_height_2D" value="1.0" type="double"/>
		<param name="local_planner/sim_mode" value="true" type="bool"/>
		<param name="local_planner/max_planning_vel" value="0.5" type="double"/>
		<param name="local_planner/max_planning_yaw" value="0.785" type="double"/>
		<param name="local_planner/distance_threshold" value="0.5" type="double"/>
		<param name="apf/inflate_distance" value="0.8" type="double"/>
		<param name="apf/sensor_max_range" value="5.0" type="double"/>  
		<param name="apf/k_push" value="2.0" type="double"/>
		<param name="apf/k_att" value="1.0" type="double"/>
		<param name="apf/min_dist" value="0.1" type="double"/>
		<param name="apf/max_att_dist" value="4" type="double"/>
		<param name="apf/ground_height" value="0.3" type="double"/>
		<param name="apf/ground_safe_height" value="0.3" type="double"/>
		<param name="apf/safe_distance" value="0.1" type="double"/>
	</node-->	

	<arg name="topic_of_local_pcl" default="/prometheus/sensors/2Dlidar_scan"/>
	<!-- 启动局部规划算法 -->
	<node pkg="prometheus_local_planning" name="local_planner_main" type="local_planner_main" output="screen" launch-prefix="gnome-terminal --">	
		<remap from="/prometheus/planning/local_pcl" to="$(arg topic_of_local_pcl)" />
		<remap from="/prometheus/control_command" to="/prometheus/planning/control_command" />
		<!-- 参数 -->
		<!-- 选择算法 0代表APF,1代表VFH, 2代表SAPF-->
		<param name="local_planner/algorithm_mode" value="2" type="int"/>
		<!-- 激光雷达模型,0代表3d雷达,1代表2d雷达 -->
		<param name="local_planner/lidar_model" value="1" type="int"/>
		<!-- 飞行高度 -->
		<!--param name="local_planner/fly_height_2D" value="1.0" type="double"/-->
		<param name="local_planner/fly_height_2D" value="1.0" type="double"/>
		<param name="local_planner/sim_mode" value="true" type="bool"/>
		<!-- 最大速度，设的越小越安全 -->
		<param name="local_planner/max_planning_vel" value="0.5" type="double"/>
		<!-- root1 adds max planning yaw -->
		<param name="local_planner/max_planning_yaw" value="0.55" type="double"/>
		<!-- root1 adds disThreshold -->
		<param name="local_planner/distance_threshold" value="0.1" type="double"/>
		<!-- 膨胀参数，一般设置为无人机的半径或更大 -->
		<!--param name="apf/inflate_distance" value="0.8" type="double"/-->
		<!-- for obstacle_withPad.world -->
        <param name="sapf/inflate_distance" value="0.77" type="double"/>
		<!--param name="sapf/inflate_distance" value="0.5" type="double"/-->
		<!-- 感知距离，只考虑感知距离内的障碍物 -->
		<!--param name="sapf/obs_distance" value="5.0" type="double"/-->  
		<param name="sapf/sensor_max_range" value="5.0" type="double"/>  
		<!-- 增益 -->
		<!--param name="sapf/k_push" value="2.0" type="double"/>
		<param name="sapf/k_att" value="1.0" type="double"/-->
		<param name="sapf/k_push" value="0.55" type="double"/>
		<param name="sapf/k_att" value="0.462" type="double"/>
		<!-- 安全距离，距离障碍物在安全距离内，k_push自动增大 -->
		<param name="sapf/min_dist" value="0.1" type="double"/>
		<!-- 最大吸引距离 -->
		<param name="sapf/max_att_dist" value="4" type="double"/>
		<!-- 地面高度，不考虑低于地面高度的障碍物 -->
		<param name="sapf/ground_height" value="0.3" type="double"/>
		<!-- 地面安全高度，小于该高度，会产生向上推力 root1: not used-->
		<param name="sapf/ground_safe_height" value="0.3" type="double"/>
		<!-- 停止距离，小于该距离，停止自动飞行 -->
		<!-- param name="sapf/safe_distance" value="0.01" type="double"/-->
		<param name="sapf/safe_distance" value="0.1" type="double"/>
		<!--- root1 adds sapf parameters -->
		<param name="sapf/dsafe" value="0.8" type="double"/>
		<param name="sapf/dvort" value="1.2" type="double"/>
		<!--param name="sapf/alpha_th" value="0.01" type="double"/-->
	</node>	

	<!-- run the pub_goal.cpp -->
	<node pkg="prometheus_mission" type="pub_goal" name="pub_goal" output="screen" launch-prefix="gnome-terminal --">	
		<param name="pub_goal/useKeyboard_flag" value="false" type="bool"/>
		<param name="pub_goal/goal_x" value="7.5" type="double"/>
		<param name="pub_goal/goal_y" value="0.0" type="double"/>
		<param name="pub_goal/goal_z" value="1.0" type="double"/>
	</node>

	<!-- 启动rviz,设为false可关闭 -->
	<arg name="visualization" default="true"/>
	<group if="$(arg visualization)">
        <node type="rviz" name="rviz" pkg="rviz" args="-d $(find prometheus_gazebo)/config/rviz_config/rviz_planning.rviz" />
    </group>


     <param name="robot_description" command="$(find xacro)/xacro $(find prometheus_gazebo)/models/diff_robot/urdf/diff_wheeled_robot.xacro" />

    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- linear motion robot initial place-->
	<!--node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model diff_wheeled_robot -param robot_description -x 6.5 -y -1.5 -z 0.0"/--> 
	<!-- circumferencial motion robot initial place-->
	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model diff_wheeled_robot -param robot_description -x 7.5 -y 0.0 -z 0.0"/>
	<!--node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model diff_wheeled_robot -param robot_description -x 8.0 -y -7.5 -z 0.0"/-->
	<!--node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model diff_wheeled_robot -param robot_description -x 20.0 -y 20.0 -z 0.0"/-->

	<!-- run the landpad_det2.cpp -->
    <node pkg="prometheus_detection" type="landpad_det2" name="landpad_det2" output="screen">
        <param name="camera_topic" type="string" value="/prometheus/sensor/monocular_down/image_raw" />
        <param name="camera_info" type="string" value="$(find prometheus_gazebo)/config/camera_config/camera_param_gazebo_monocular.yaml" />
    </node>

    <!-- run the vs_landing.cpp -->
    <node pkg="prometheus_mission" type="planning_pbvs_landing" name="planning_pbvs_landing" output="screen" launch-prefix="gnome-terminal --">
		<remap from="/prometheus/control_command" to="/prometheus/landing/control_command" />
        <!-- 仿真模式 - 区别在于是否自动切换offboard模式 -->
		<param name="sim_mode" value="true" />
		<!-- 悬停模式 - 仅用于观察检测结果 -->
		<param name="hold_mode" value="false" />
		<!-- 是否使用降落板绝对高度 -->
		<param name="use_pad_height" value="false" />
		<!--param name="pad_height" value="0.99" /-->
		<param name="pad_height" value="0.45" />
		<!-- 起始点 -->
		<!--param name="start_point_x" value="0.0" />
		<param name="start_point_y" value="0.0" /-->
		<!--param name="start_point_z" value= "4.5" /-->
		<!--param name="start_point_x" value="-0.8" /-->
		<!--param name="start_point_y" value= "-2.4" /-->
		<!--param name="start_point_y" value= "-2.0" /-->
		<!-- for experiments -->
		<!--param name="start_point_x" value="-0.6" />
		<param name="start_point_y" value="-1.6" />
		<param name="start_point_x" value="-0.4" />
		<param name="start_point_y" value="-2.0" /-->
        <param name="start_point_x" value="0.0" />
		<param name="start_point_y" value="0.0" />
		<param name="start_point_z" value= "2.5" />
		<!-- 相机安装偏差 -->
		<param name="camera_offset_x" value="0.05" />
		<param name="camera_offset_y" value="0.05" />
		<param name="camera_offset_z" value="-0.1" />
		<!-- 追踪控制参数 -->
		<!--param name="arm_height_to_ground" value="0.5" /-->
		<!--param name="arm_distance_to_pad" value="0.6" /-->
		<param name="arm_height_to_ground" value="0.25" />
		<param name="arm_distance_to_pad" value="0.25" />
		<!-- VS参数 -->
		<!-- target with stationary motion -->
		<param name="hd" value="0.15" />
		<param name="kx_vs" value="1.0" />
		<param name="ky_vs" value="1.0" />
		<param name="kz_vs" value="0.3" />
		<param name="kyaw_vs" value="1.0" />
		<param name="lambda" value="1.15" />
		<param name="lambda_0" value="2.5" />
		<param name="lambda_inf" value="0.85" />
		<param name="kvt_x" value="0.0" />
		<param name="kvt_y" value="0.0" />
		<param name="kvt_z" value="0.0" />
		<param name="kvt_w" value="0.0" />
		<!-- target with linear motion -->
		<!--param name="hd" value="0.15" />
		<param name="kx_vs" value="1.0" />
		<param name="ky_vs" value="0.8" />
		<param name="kz_vs" value="0.25" />
		<param name="kyaw_vs" value="1.0" />
		<param name="lambda" value="1.15" />
		<param name="lambda_0" value="2.5" />
		<param name="lambda_inf" value="1.15" />
		<param name="kvt_x" value="1.95" />
		<param name="kvt_y" value="1.0" />
		<param name="kvt_z" value="1.0" />
		<param name="kvt_w" value="1.0" -->
		<!-- target with circumferential motion -->
		<!--param name="hd" value="0.15" />
		<param name="kx_vs" value="1.0" />
		<param name="ky_vs" value="1.0" />
		<param name="kz_vs" value="0.18" />
		<param name="kyaw_vs" value="1.0" />
		<param name="lambda" value="1.1" />
		<param name="lambda_0" value="1.6" />
		<param name="lambda_inf" value="1.1" />
		<param name="kvt_x" value="2.0" />
		<param name="kvt_y" value="1.0" />
		<param name="kvt_z" value="1.0" />
		<param name="kvt_w" value="1.0" /-->
		<!-- root1 270623 adds -->
		<param name="start_move_flag" value="false" />
		<param name="start_move_distance" value="0.0" />
		<param name="force_landing_flag" value="true" />
    </node>
</launch>